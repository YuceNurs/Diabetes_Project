import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
#!pip install missingno
import missingno as msno
from datetime import date
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler


pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x:'%.3f' %x)
pd.set_option('display.width',500)

def load():
    data = pd.read_csv("C:\Program Files\python\diabetes\diabetes.csv")
    return data

df = load()
df.head()
print(df)
print(df.info())

cat_cols = [col for col in df.columns]

#cat_cols = [col for col in df.columns if str(df[col].dtypes) in ["category","object","bool"]]
num_but_cat= [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes in ["int","float"]]
cat_cols = cat_cols + num_but_cat
num_cols = [col for col in df.columns if df[col].dtypes in ["int", "float"]]

num_cols =[col for col in num_cols if col not in cat_cols]
def cat_summary(dataFrame, col_name, plot=False):
    print(pd.DataFrame({col_name: dataFrame[col_name].value_counts(),
                        "Ratio": 100* dataFrame[col_name].value_counts()/len(dataFrame)}))
    print("###################################")

    if plot:
        sns.countplot(x=dataFrame[col_name], data = dataFrame)
        plt.show(block = True)

cat_summary(df,"Outcome", plot= True)

#for col in cat_cols :
      #cat_summary(df,col, plot= True)

def num_summary(dataframe, numerical_col, plot=False):
    quantiles =[0.01,0.05,0.25,0.50,0.75,0.90,0.99,1.00]
    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:
        dataframe[numerical_col].hist()
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show(block=True)

for col in num_cols:
    num_summary(df,col, plot=True)

num_summary(df,["Glucose","Insulin","BloodPressure","SkinThickness","BMI","Outcome","DiabetesPedigreeFunction"], plot=True)

def grab_col_names(dataframe, cat_th=10, car_th=20):
    """

    Parameters
    ----------
    dataframe : dataframe
      değişken isimleri alınmak istenen dataframe'dir.
    cat_th : int, float
      numerik fakat kategorik olan değişkenler için sınıf eşik değeri
    car_th : int, float
      kategorik fakat kardinal değişkenler için sınıf eşik değeri

    Returns
    -------
    car_cols: list
       kategorik değişken listesi
    num_cols: list
       numerik değişken listesi
    cat_but_car: list
       kategorik görünümlü kardinal değişken listesi

    Notes
    --------
    cat_cols +num_cols + cat_but_car = toplam değişken sayısı
    num_but_cat, cat_cols'un içerisinde
    """


    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]
    num_but_cat = [col for col in dataframe.columns if
                   dataframe[col].nunique() < cat_th and dataframe[col].dtypes != "O"]
    cat_but_car = [col for col in dataframe.columns if
                   dataframe[col].nunique() > car_th and dataframe[col].dtypes == "O"]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O"]
    num_cols = [col for col in num_cols if col not in num_but_cat]

    print(f"Observations:{dataframe.shape[0]}")
    print(f"Variables:{dataframe.shape[1]}")
    print(f'cat_cols:{len(cat_cols)}')
    print(f'num_cols:{len(num_cols)}')
    print(f'cat_but_car:{len(cat_but_car)}')
    print(f'num_but_cat:{len(num_but_cat)}')

    return cat_cols, num_cols, cat_but_car
grab_col_names(df)

cat_cols, num_cols, cat_but_car = grab_col_names(df)

def target_summary_with_num(dataframe, target, numerical_col):
    print(dataframe.groupby(target).agg({numerical_col: "mean"}), end="\n\n\n")

for col in num_cols:
    target_summary_with_num(df, "Outcome", col)
#KORELASYON

f, ax = plt.subplots(figsize=[18, 13])
sns.heatmap(df.corr(), annot=True, fmt=".2f", ax=ax, cmap="magma")
ax.set_title("Correlation Matrix", fontsize=20)
plt.show(block=True)
